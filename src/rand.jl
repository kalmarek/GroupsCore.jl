import Random

"""
    PRASampler
Product Replacement Algorithm sampler for arbitrary group generated by
an explicit finite set of generators.
"""
mutable struct PRASampler{T} <: Random.Sampler{T}
    gentuple::Vector{T}
    right::T
    left::T
end

# constants taken from GAP
function PRASampler(
    M,
    n::Integer = 2ngens(M) + 10,
    scramble_time::Integer = 10max(n, 10),
)
    return PRASampler(Random.default_rng(), M, n, scramble_time)
end

function Random.Sampler(
    RNG::Type{<:Random.AbstractRNG},
    M::Monoid,
    repetition::Random.Repetition = Val(Inf),
)
    return PRASampler(RNG(), M)
end

function PRASampler(
    rng::Random.AbstractRNG,
    M::Monoid,
    n::Integer = 2ngens(M) + 10,
    scramble_time::Integer = 10max(n, 10),
)
    if istrivial(M)
        return PRASampler(fill(one(M), n), one(M), one(M))
    end
    @assert hasgens(M)
    l = max(n, 2ngens(M), 2)
    sampler = let S = collect(gens(M))
        if M isa Group
            S = union!(S, inv.(S))
        end
        append!(S, rand(rng, S, l - length(S)))
        PRASampler(S, one(M), one(M))
    end
    for _ in 1:scramble_time
        _ = rand(rng, sampler)
    end
    return sampler
end

function Random.rand(rng::Random.AbstractRNG, pra::PRASampler)
    i = rand(rng, 1:length(pra.gentuple))

    pra.right = pra.right * rand(rng, pra.gentuple)
    @inbounds pra.gentuple[i] = pra.gentuple[i] * pra.right
    pra.left = rand(rng, pra.gentuple) * pra.left

    return pra.left
end
